#!/usr/bin/env node

/**
 * Module dependencies.
 */

var debug = require('debug')('wired:server')
var app = require('../app')
var fs = require('fs-extra')
process.env.PORT = '3000'
// process.env.GOOGLE_MAPS_API = 'AIzaSyDE1wyCgjdsyMqSvYRWWUdp90S3IQQGtsY'
// debug("Google API: " + process.env.GOOGLE_MAPS_API)

global.page_titles = {
    '/': 'Home',
    '/account': 'Account',
    '/feed': 'Feed',
    '/users/login': 'Sign up',
    '/users/register': 'Register',
    '/createevent' : 'Create Events',
    '/createpost' : 'Create Posts'
}

// initialize database
var database = require('../databases/festivals')

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000')
app.set('port', port)

/**
 * Create HTTPS server.
 */

var https = require('https')
var options = {
    key: fs.readFileSync('./private/certificates/ca.key'),
    cert: fs.readFileSync('./private/certificates/ca.crt')
}
var server = https.createServer(options, app)

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port)
var io = require('socket.io').listen(server)
require('../sockets/socketio')(io)
server.on('error', onError)
server.on('listening', onListening)
debug('nodejs server started at: https://localhost:' + port)
debug('')

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10)

  if (isNaN(port)) {
    // named pipe
    return val
  }

  if (port >= 0) {
    // port number
    return port
  }

  return false
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges')
      process.exit(1)
      break
    case 'EADDRINUSE':
      console.error(bind + ' is already in use')
      process.exit(1)
      break
    default:
      throw error
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address()
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port
  debug('Listening on ' + bind)
}
